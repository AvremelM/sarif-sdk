// *********************************************************
// *                                                       *
// *   Copyright (C) Microsoft. All rights reserved.       *
// *                                                       *
// *********************************************************

using System;
using System.Diagnostics.Contracts;
using System.IO;
using System.Linq;

using Microsoft.CodeAnalysis.CSharp;

namespace Microsoft.CodeAnalysis.DataModelGenerator
{
    internal static class Common
    {
        public const string NumberName = "NUMBER";
        public const string StringName = "STRING";
        public const string BooleanName = "BOOLEAN";
        public const string RegExName = "REGEX";
        public const string IdentifierName = "ID";
        public const string DictionaryName = "DICTIONARY";
        public const string GrammarDictionary = "GrammarDictionary";

        private static readonly string[] ReservedNames = { "prog", StringName, NumberName, "StringCharacters", BooleanName, RegExName, DictionaryName };

        public static string ToProperCase(string name)
        {
            string tail = name.Substring(1);
            if (IsCamelCase(tail) || IsUpperCase(tail))
            {
                // do nothing
            }
            else
            {
                tail = tail.ToLower();
            }

            return String.Format("{0}{1}", char.ToUpper(name[0]), tail);
        }

        internal static SyntaxTriviaList GenerateFileHeader(Grammar grammar)
        {
            return
                SyntaxFactory.TriviaList(
                    new[]
                        {
                            SyntaxFactory.Comment(@"// /********************************************************"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"// *                                                       *"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"// *   Copyright (C) Microsoft. All rights reserved.       *"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"// *                                                       *"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"// ********************************************************/"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, SyntaxFactory.CarriageReturn, 
                            SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"//----------------------------------------------------------"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"// <auto-generated>"), SyntaxFactory.CarriageReturn, 
                            SyntaxFactory.LineFeed, SyntaxFactory.Comment(@"//     This code was generated by a tool."), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"//     Input Grammar      : " + grammar.Name), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"//     Input Grammar file : " + Path.GetFileName(grammar.SourcePath)), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, SyntaxFactory.Comment(@"//     "), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"//     Changes to this file may cause incorrect behavior and "), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"//     will be lost if the code is regenerated."), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"// </auto-generated>"), SyntaxFactory.CarriageReturn, 
                            SyntaxFactory.LineFeed, 
                            SyntaxFactory.Comment(@"//----------------------------------------------------------"), 
                            SyntaxFactory.CarriageReturn, SyntaxFactory.LineFeed
                        });
        }

        internal static bool IsCamelCase(string str)
        {
            // at most one consequitive capital letter
            int capCount = 0;
            foreach (char ch in str)
            {
                if (char.IsUpper(ch))
                {
                    capCount++;
                    if (capCount > 1)
                    {
                        return false;
                    }
                }
                else
                {
                    capCount = 0;
                }
            }

            return true;
        }

        internal static bool IsIdentifier(NonTerminal nonterminal)
        {
            return nonterminal.Type == IdentifierName;
        }

        internal static bool IsLiteral(string name)
        {
            Contract.Requires(name != null);

            return name.Equals(StringName) || name.Equals("StringCharacters");
        }

        internal static bool IsNumeric(string name)
        {
            return name.Equals(NumberName);
        }

        internal static bool IsDictionary(string name)
        {
            return name.Equals(DictionaryName);
        }

        internal static bool IsBoolean(string name)
        {
            return name.Equals(BooleanName);
        }

        internal static bool IsReserved(string lhsName)
        {
            return ReservedNames.Contains(lhsName);
        }

        private static bool IsUpperCase(string str)
        {
            Contract.Requires(str != null);
            Contract.Requires(str.Length > 0);

            return str.Equals(str.ToUpper());
        }
    }
}