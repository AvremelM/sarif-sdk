<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!-- Make sure the data model generator project is built before the build for this project starts. -->
  
  <PropertyGroup>
    <!-- If a project already references DataModelGenerator for some other reason, set this to false. -->
    <BuildDataModelGenerator Condition="'$(BuildDataModelGenerator)'!=''">$([System.Convert]::ToBoolean($(BuildDataModelGenerator)))</BuildDataModelGenerator>
    <BuildDataModelGenerator Condition="'$(BuildDataModelGenerator)'==''">true</BuildDataModelGenerator>
  </PropertyGroup>

  <ItemGroup Condition="'$(BuildDataModelGenerator)'=='true'">
    <ProjectReference Include="$(MSBuildThisFileDirectory)DataModelGenerator\DataModelGenerator.csproj">
      <Project>{b4f63d09-5cea-4afa-a72b-a1455b077ae2}</Project>
      <Name>DataModelGenerator</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
  </ItemGroup>

  <PropertyGroup>
    <!-- Inject grammar building. Must be after Microsoft.CSharp.targets is imported. -->
    <CompileDependsOn>BuildAndInjectGrammars;$(CompileDependsOn)</CompileDependsOn>
  </PropertyGroup>
  <PropertyGroup>
    <_GrammarsOutputDirectory>$(FlavorIndependentIntermediateOutputPath)Grammars</_GrammarsOutputDirectory>
  </PropertyGroup>
  <!-- This target runs only when we actually need to build grammar files. -->
  <Target Name="BuildGrammar" Inputs="@(G4File);$(DataModelGeneratorPath)DataModelGenerator.exe" Outputs="$(_GrammarsOutputDirectory)\%(FileName).cs">
    <MakeDir Directories="$(_GrammarsOutputDirectory)" />
    <ItemGroup>
      <FileWrites Include="$(_GrammarsOutputDirectory)" />
    </ItemGroup>

    <Message Text="&quot;$(DataModelGeneratorPath)DataModelGenerator.exe&quot; %(G4File.AdditionalCommandLineOptions) /F /Input &quot;%(G4File.FullPath)&quot; /Output &quot;$(_GrammarsOutputDirectory)\%(FileName).cs&quot;" />
    <Exec Command="&quot;$(DataModelGeneratorPath)DataModelGenerator.exe&quot; %(G4File.AdditionalCommandLineOptions) /F /Input &quot;%(G4File.FullPath)&quot; /Output &quot;$(_GrammarsOutputDirectory)\%(FileName).cs&quot;" />
    <Message Text="@(G4File) -> $(_GrammarsOutputDirectory)\%(FileName).cs"/>
  </Target>
  <!--
  This target runs every build. It runs the grammar generator (if necessary) and injects
  the outputs thereof into the C# build.
  -->
  <Target Name="BuildAndInjectGrammars">
    <!-- Build grammars if necessary. -->
    <CallTarget Targets="BuildGrammar" />
    <PropertyGroup>
      <!--
      "stringize" the G4File batch with wildcards. Going directly to an ItemGroup produces items containing
      the wildcards, rather than items with the wildcards expanded.
      -->
      <_GeneratedGrammarFile>@(G4File->'$(_GrammarsOutputDirectory)\%(FileName).cs')</_GeneratedGrammarFile>
    </PropertyGroup>
    <ItemGroup>
      <!-- Expand the wildcards (*.cs) -->
      <_GeneratedGrammarFile Include="$(_GeneratedGrammarFile)" />
      <!-- FileWrites are the set of files that get deleted on clean. -->
      <FileWrites Include="@(_GeneratedGrammarFile)" />
      <!-- Compile are the set of files that go into the C# build. -->
      <Compile Include="@(_GeneratedGrammarFile)" />
    </ItemGroup>
  </Target>
</Project>