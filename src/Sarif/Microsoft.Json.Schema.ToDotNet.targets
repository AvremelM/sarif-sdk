<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Inject object model building. Must be after Microsoft.CSharp.targets is imported. -->
    <CompileDependsOn>BuildAndInjectObjectModel;$(CompileDependsOn)</CompileDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <JsonSchemaToDotNetPath>..\packages\Microsoft.Json.Schema.ToDotNet.0.6.0\tools\JsonSchemaToDotNet.exe</JsonSchemaToDotNetPath>
    <_ObjectModelOutputDirectory>$(FlavorIndependentIntermediateOutputPath)Autogenerated</_ObjectModelOutputDirectory>
  </PropertyGroup>
  
  <!-- This target runs only when we actually need to build the object model files, which should be
       only when the JSON schema changes. -->
  <Target Name="BuildObjectModel" Inputs="@(JsonSchemaFile)" Outputs="$(_ObjectModelOutputDirectory)\*.cs">
    <MakeDir Directories="$(_ObjectModelOutputDirectory)" />
    <ItemGroup>
      <FileWrites Include="$(_ObjectModelOutputDirectory)" />
    </ItemGroup>

    <Exec Command="&quot;$(JsonSchemaToDotNetPath)&quot; --schema-file-path &quot;%(JsonSchemaFile.FullPath)&quot; --output-directory &quot;$(_ObjectModelOutputDirectory)&quot; --force-overwrite --namespace-name %(JsonSchemaFile.Namespace) --root-class-name %(JsonSchemaFile.RootClassName) --copyright-file-path &quot;%(JsonSchemaFile.CopyrightFilePath)&quot; --hints-file-path &quot;%(JsonSchemaFile.HintsFilePath)&quot;" />
    <Message Text="Generated classes from @(JsonSchemaFile) -> $(_ObjectModelOutputDirectory)"/>
  </Target>
  <!--
  This target runs every build. It runs the grammar generator (if necessary) and injects
  the outputs thereof into the C# build.
  -->
  <Target Name="BuildAndInjectObjectModel">
    <!-- Build the object model if necessary. -->
    <CallTarget Targets="BuildObjectModel" />
    
    <!-- Temporary hack: The Json.Schema.ToDotNet package does not yet do a couple of
         things that we need:
         
         1. It doesn't handle dictionaries whose values are anything other than strings
            This means it can't handle RunInfo.FileInfo, which is of type
            Dictionary<string, IList<FileInfo>>.
            https://github.com/jschema/issues/49

         2. It doesn't yet generate the SarifRewritingVisitor method.
            https://github.com/jschema/issues/56
            
         So for now, we store hard-coded copies of the affected files in the
         NotYetAutoGenerated directory. If we make any schema changes that affect the
         classes in those files, we must update them by hand. This is a great
         incentive to address these issues.
    -->
    <ItemGroup>
      <_NotYetGeneratedFiles Include="NotYetAutoGenerated\*.cs" />
    </ItemGroup>
    <Copy SourceFiles="@(_NotYetGeneratedFiles)"
          DestinationFolder="$(_ObjectModelOutputDirectory)" />

    <ItemGroup>
      <!-- FileWrites are the set of files that get deleted on clean. -->
      <FileWrites Include="$(_ObjectModelOutputDirectory)\*.cs" />
      <!-- Compile are the set of files that go into the C# build. -->
      <Compile Include="$(_ObjectModelOutputDirectory)\*.cs" />
    </ItemGroup>
  </Target>
</Project>