{
"version":"1.0.0-beta.5",
"$schema":"http://json.schemastore.org/sarif-1.0.0",
"runs":[
  {
    "tool":{
      "name":"PREfast",
      "fullName":"PREfast Code Analysis",
      "version":"14.0.0"
    },
    "logicalLocations":{
      "":[
        {
          "kind":"method",
          "name":""
        }
      ],
      "?test_b_a@@YAXPADPBVBase@@@Z":[
        {
          "kind":"method",
          "name":"test_b_a"
        }
      ],
      "?test_d_b@@YAXPADPBVDerived@@@Z":[
        {
          "kind":"method",
          "name":"test_d_b"
        }
      ],
      "?test_d_a@@YAXPADPBVDerived@@@Z":[
        {
          "kind":"method",
          "name":"test_d_a"
        }
      ]
    },
    "results":[
      {
        "ruleId":"28204",
        "message":"'Compare' has an override at `c:\\somepath\\test049.cpp(18)` and only the override is annotated for _Param_(1): when an override is annotated, the base (this function) should be similarly annotated.",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test049.cpp",
              "region":{
                "startColumn":25,
                "startLine":7
              }
            },
            "fullyQualifiedLogicalName":"",
            "logicalLocationKey":"",
            "properties":{
              "decorated":"",
              "funcline":""
            }
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression 'buf[100]'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: any constant is not constrained by (c->Base::a)`29\n\nBuffer buf is a parameter to this function declared on line 29\nBuffer is of length offset(buf)`29 + (c->Base::a)`29 bytes [from annotation SAL_readableTo(elementCount(c->a)) at c:\\somepath\\test049.cpp(29)]\nAccessing the byte at byte offset 100\n\nValues of variables:\nPointer buf is at offset 0 bytes from the start of the buffer\n\nwhere\noffset(buf)`29 == 0\n(c->Base::a)`29 >= 1\n\nOverrun access occurs when\n(c->Base::a)`29 <= 100\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test049.cpp",
              "region":{
                "startColumn":13,
                "startLine":31
              }
            },
            "fullyQualifiedLogicalName":"test_b_a",
            "logicalLocationKey":"?test_b_a@@YAXPADPBVBase@@@Z",
            "properties":{
              "decorated":"?test_b_a@@YAXPADPBVBase@@@Z",
              "funcline":"29"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test049.cpp",
                  "region":{
                    "startColumn":14,
                    "startLine":29
                  }
                }
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test049.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":31
                  }
                }
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression 'buf[100]'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: any constant is not constrained by (c->Derived::b)`34\n\nBuffer buf is a parameter to this function declared on line 34\nBuffer is of length offset(buf)`34 + (c->Derived::b)`34 bytes [from annotation SAL_readableTo(elementCount(c->b)) at c:\\somepath\\test049.cpp(34)]\nAccessing the byte at byte offset 100\n\nValues of variables:\nPointer buf is at offset 0 bytes from the start of the buffer\n\nwhere\noffset(buf)`34 == 0\n(c->Derived::b)`34 >= 1\n\nOverrun access occurs when\n(c->Derived::b)`34 <= 100\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test049.cpp",
              "region":{
                "startColumn":13,
                "startLine":36
              }
            },
            "fullyQualifiedLogicalName":"test_d_b",
            "logicalLocationKey":"?test_d_b@@YAXPADPBVDerived@@@Z",
            "properties":{
              "decorated":"?test_d_b@@YAXPADPBVDerived@@@Z",
              "funcline":"34"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test049.cpp",
                  "region":{
                    "startColumn":14,
                    "startLine":34
                  }
                }
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test049.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":36
                  }
                }
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression 'buf[100]'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: any constant is not constrained by (c->Base::a)`40\n\nBuffer buf is a parameter to this function declared on line 40\nBuffer is of length offset(buf)`40 + (c->Base::a)`40 bytes [from annotation SAL_readableTo(elementCount(c->Base.a)) at c:\\somepath\\test049.cpp(40)]\nAccessing the byte at byte offset 100\n\nValues of variables:\nPointer buf is at offset 0 bytes from the start of the buffer\n\nwhere\noffset(buf)`40 == 0\n(c->Base::a)`40 >= 1\n\nOverrun access occurs when\n(c->Base::a)`40 <= 100\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test049.cpp",
              "region":{
                "startColumn":13,
                "startLine":42
              }
            },
            "fullyQualifiedLogicalName":"test_d_a",
            "logicalLocationKey":"?test_d_a@@YAXPADPBVDerived@@@Z",
            "properties":{
              "decorated":"?test_d_a@@YAXPADPBVDerived@@@Z",
              "funcline":"40"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test049.cpp",
                  "region":{
                    "startColumn":14,
                    "startLine":40
                  }
                }
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test049.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":42
                  }
                }
              }
            ]
          }
        ]
      }
    ]
  }
]
}