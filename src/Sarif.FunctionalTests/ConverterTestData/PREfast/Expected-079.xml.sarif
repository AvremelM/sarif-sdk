{
"version":"1.0.0",
"$schema":"http://json.schemastore.org/sarif-1.0.0",
"runs":[
  {
    "tool":{
      "name":"PREfast",
      "fullName":"PREfast Code Analysis"
    },
    "results":[
      {
        "ruleId":"26000",
        "message":"Overflow using expression 's->arr[s->elts]'\nBuffer s is a parameter to this function declared on line 10\nBuffer is of length offset(s)`10 + 4*(s->S::elts)`10 + 4 bytes [from annotation SAL_readableTo(byteCount(4 + s->elts * 4)) at c:\\somepath\\test079.cpp(10)]\nAccessing 4 bytes starting at byte offset 4*(s->S::elts)`10 + 4\n\nValues of variables:\n(s->S::elts) = (s->S::elts)`10\nPointer s is at offset 0 bytes from the start of the buffer\n\nwhere\noffset(s)`10 == 0\n(s->S::elts)`10 >= 0\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":21,
                "startLine":12
              }
            },
            "fullyQualifiedLogicalName":"f",
            "decoratedName":"?f@@YAXPAUS@@@Z",
            "properties":{
              "funcline":"10"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":10
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":21,
                    "startLine":12
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression '(void *)pData3'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: (s1.S1::ctx1->Context::len1)`34 is not constrained by (s1.S1::ctx2->Context::len1)`34\n\nBuffer pData3 is a parameter to this function declared on line 34\nBuffer is of length offset(pData3)`34 + (s1.S1::ctx2->Context::len1)`34 bytes [from annotation SAL_writableTo(elementCount((& s1)->ctx2->len1)) at c:\\somepath\\test079.cpp(34)]\nAccessing (s1.S1::ctx1->Context::len1)`34 bytes starting at byte offset 0\nAnnotation on function memcpy requires that {parameter 1} is of length >= {parameter 3} bytes\n  where {parameter 1} is (void *)pData3; {parameter 3} is s1.ctx1->len1\n[Annotation _Out_(byteCount({parameter 3}))]\n\n\nValues of variables:\n(s1.S1::ctx1->Context::len1) = (s1.S1::ctx1->Context::len1)`34\nPointer pData3 is at offset 0 bytes from the start of the buffer\nPointer s1.S1::ctx1 is at offset 0 bytes from the start of s1.S1::ctx1\n\nwhere\noffset(pData3)`34 == 0\n(s1.S1::ctx1->Context::len1)`34 >= 1\n(s1.S1::ctx2->Context::len1)`34 >= 1\n\nOverrun access occurs when\n(s1.S1::ctx1->Context::len1)`34 >= (s1.S1::ctx2->Context::len1)`34 + 1\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":11,
                "startLine":39
              }
            },
            "fullyQualifiedLogicalName":"foo",
            "decoratedName":"?foo@@YAXPAD000US1@@@Z",
            "properties":{
              "funcline":"34"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":34
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":39
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression '(void *)pData3'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: ((s1->S1::ctx1)->Context::len1)`43 is not constrained by ((s1->S1::ctx2)->Context::len1)`43\n\nBuffer pData3 is a parameter to this function declared on line 43\nBuffer is of length offset(pData3)`43 + ((s1->S1::ctx2)->Context::len1)`43 bytes [from annotation SAL_writableTo(elementCount(s1->ctx2->len1)) at c:\\somepath\\test079.cpp(43)]\nAccessing ((s1->S1::ctx1)->Context::len1)`43 bytes starting at byte offset 0\nAnnotation on function memcpy requires that {parameter 1} is of length >= {parameter 3} bytes\n  where {parameter 1} is (void *)pData3; {parameter 3} is s1->ctx1->len1\n[Annotation _Out_(byteCount({parameter 3}))]\n\n\nValues of variables:\n((s1->S1::ctx1)->Context::len1) = ((s1->S1::ctx1)->Context::len1)`43\nPointer (s1->S1::ctx1) is at offset 0 bytes from the start of (s1->S1::ctx1)\nPointer pData3 is at offset 0 bytes from the start of the buffer\nPointer s1 is at offset 0 bytes from the start of s1\n\nwhere\noffset(pData3)`43 == 0\n((s1->S1::ctx1)->Context::len1)`43 >= 1\n((s1->S1::ctx2)->Context::len1)`43 >= 1\n\nOverrun access occurs when\n((s1->S1::ctx1)->Context::len1)`43 >= ((s1->S1::ctx2)->Context::len1)`43 + 1\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":11,
                "startLine":48
              }
            },
            "fullyQualifiedLogicalName":"bar",
            "decoratedName":"?bar@@YAXPAD000ABUS1@@@Z",
            "properties":{
              "funcline":"43"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":43
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":48
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26017",
        "message":"Potential read overflow using expression '(const void *)(& this->x)'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: (this->C::n)`65 is not constrained by any constant\n\nBuffer accessed is C::x\nBuffer is of length 100 bytes [size of field]\nAccessing (this->C::n)`65 + 1 bytes starting at byte offset 0\nAnnotation on function memcpy requires that {parameter 2} is of length >= {parameter 3} bytes\n  where {parameter 2} is (const void *)(& this->x); {parameter 3} is (size_t)(this->n + 1)\n[Annotation _In_(byteCount({parameter 3}))]\n\n\nValues of variables:\n(this->C::n) = (this->C::n)`65\nPointer this is at offset 0 bytes from the start of this\n\nwhere\n(this->C::n)`65 >= 1\n\nOverrun access occurs when\n(this->C::n)`65 >= 100\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":11,
                "startLine":67
              }
            },
            "fullyQualifiedLogicalName":"C::f",
            "decoratedName":"?f@C@@QAGXPAD@Z",
            "properties":{
              "funcline":"65"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":20,
                    "startLine":65
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":67
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression '(void *)a'\nBuffer a is a parameter to this function declared on line 65\nBuffer is of length offset(a)`65 + (this->C::n)`65 bytes [from annotation SAL_writableTo(elementCount(this->n)) at c:\\somepath\\test079.cpp(62)]\nAccessing (this->C::n)`65 + 1 bytes starting at byte offset 0\nAnnotation on function memcpy requires that {parameter 1} is of length >= {parameter 3} bytes\n  where {parameter 1} is (void *)a; {parameter 3} is (size_t)(this->n + 1)\n[Annotation _Out_(byteCount({parameter 3}))]\n\n\nValues of variables:\n(this->C::n) = (this->C::n)`65\nPointer a is at offset 0 bytes from the start of the buffer\nPointer this is at offset 0 bytes from the start of this\n\nwhere\noffset(a)`65 == 0\n(this->C::n)`65 >= 1\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":11,
                "startLine":67
              }
            },
            "fullyQualifiedLogicalName":"C::f",
            "decoratedName":"?f@C@@QAGXPAD@Z",
            "properties":{
              "funcline":"65"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":20,
                    "startLine":65
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":67
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'buf[p->elts]'\nBuffer buf is a parameter to this function declared on line 70\nBuffer is of length offset(buf)`70 + (p->S::elts)`70 bytes [from annotation SAL_writableTo(elementCount(p->elts)) at c:\\somepath\\test079.cpp(70)]\nAccessing the byte at byte offset (p->S::elts)`70\n\nValues of variables:\n(p->S::elts) = (p->S::elts)`70\nPointer buf is at offset 0 bytes from the start of the buffer\nPointer p is at offset 0 bytes from the start of p\n\nwhere\noffset(buf)`70 == 0\n(p->S::elts)`70 >= 1\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":17,
                "startLine":72
              }
            },
            "fullyQualifiedLogicalName":"fieldSameAsParam1",
            "decoratedName":"?fieldSameAsParam1@@YAXPADAAUS@@H@Z",
            "properties":{
              "funcline":"70"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":70
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":17,
                    "startLine":72
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression '& cC1'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: c1.C::n`117 is not constrained by any constant\n\nBuffer accessed is cC1\nBuffer is of length 100 bytes [size of variable]\nAccessing c1.C::n`117 bytes starting at byte offset 0\nAnnotation on function C::f requires that {parameter 2} is of length >= {parameter 1}->n elements (1 bytes\/element)\n  where {parameter 2} is & cC1; {parameter 1} is & c1\n[Annotation SAL_writableTo(elementCount({parameter 1}->n)) at c:\\somepath\\test079.cpp(62)]\n\n\nValues of variables:\nc1.C::n = c1.C::n`117\n\nOverrun access occurs when\nc1.C::n`117 >= 101\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test079.cpp",
              "region":{
                "startColumn":9,
                "startLine":117
              }
            },
            "fullyQualifiedLogicalName":"main",
            "decoratedName":"main",
            "properties":{
              "funcline":"84"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":84
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":7,
                    "startLine":88
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":12,
                    "startLine":89
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":90
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":92
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":92
                  }
                },
                "step":6
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":93
                  }
                },
                "step":7
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":93
                  }
                },
                "step":8
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":94
                  }
                },
                "step":9
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":95
                  }
                },
                "step":10
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":8,
                    "startLine":97
                  }
                },
                "step":11
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":98
                  }
                },
                "step":12
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":99
                  }
                },
                "step":13
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":100
                  }
                },
                "step":14
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":101
                  }
                },
                "step":15
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":103
                  }
                },
                "step":16
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":104
                  }
                },
                "step":17
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":105
                  }
                },
                "step":18
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":106
                  }
                },
                "step":19
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":8,
                    "startLine":107
                  }
                },
                "step":20
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":109
                  }
                },
                "step":21
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":110
                  }
                },
                "step":22
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":111
                  }
                },
                "step":23
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":112
                  }
                },
                "step":24
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":8,
                    "startLine":113
                  }
                },
                "step":25
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":7,
                    "startLine":115
                  }
                },
                "step":26
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":115
                  }
                },
                "step":27
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":116
                  }
                },
                "step":28
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test079.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":117
                  }
                },
                "step":29
              }
            ]
          }
        ]
      }
    ]
  }
]
}