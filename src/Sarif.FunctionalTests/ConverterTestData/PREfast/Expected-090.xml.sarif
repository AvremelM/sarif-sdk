{
"version":"1.0.0",
"$schema":"http://json.schemastore.org/sarif-1.0.0",
"runs":[
  {
    "tool":{
      "name":"PREfast",
      "fullName":"PREfast Code Analysis"
    },
    "results":[
      {
        "ruleId":"26000",
        "message":"Overflow using expression 'a[x]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset 10\n\n when function add1 called at line 12 is inline analyzed.\n\nValues of variables:\nx = 10\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":10,
                "startLine":13
              }
            },
            "fullyQualifiedLogicalName":"g",
            "decoratedName":"?g@@YAXH@Z",
            "properties":{
              "funcline":"9"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":9
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":11
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":12
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":7,
                    "startLine":12
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":13
                  }
                },
                "step":5
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'a[result.add9]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset 10\n\n when function add9 called at line 33 is inline analyzed.\n\nValues of variables:\nresult.add9 = 10\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":16,
                "startLine":33
              }
            },
            "fullyQualifiedLogicalName":"calladd9",
            "decoratedName":"?calladd9@@YAXXZ",
            "properties":{
              "funcline":"30"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":30
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":32
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":33
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":16,
                    "startLine":33
                  }
                },
                "step":4
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'a[x]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset 10\n\n when function add1deref called at line 45 is inline analyzed.\n\nValues of variables:\nx = 10\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":10,
                "startLine":46
              }
            },
            "fullyQualifiedLogicalName":"calladd1deref",
            "decoratedName":"?calladd1deref@@YAXXZ",
            "properties":{
              "funcline":"41"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":41
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":43
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":44
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":44
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":14,
                    "startLine":45
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":46
                  }
                },
                "step":6
              }
            ]
          }
        ]
      },{
        "ruleId":"26014",
        "message":"Potential overflow using expression '(void *)(& a)'\nThis is likely to be due to incorrect or insufficient validation of the buffer access\nBuffer accessed is a\nBuffer is of length 10 bytes [size of variable]\nAccessing (this->C::size)`53 + 1 bytes starting at byte offset 0\nAnnotation on function memcpy requires that {parameter 1} is of length >= {parameter 3} bytes\n  where {parameter 1} is (void *)(& a); {parameter 3} is result.GetSize + 1\n[Annotation _Out_(byteCount({parameter 3}))]\n\n\n when function C::GetSize called at line 73 is inline analyzed.\n when function C::GetBuffer called at line 75 is inline analyzed.\n when function C::GetSize called at line 75 is inline analyzed.\n\nValues of variables:\nresult.GetSize = (this->C::size)`53\n\nwhere\n(this->C::size)`53 <= 10\n(this->C::size)`53 >= 0\n\nOverrun access occurs when\n(this->C::size)`53 == 10\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":15,
                "startLine":75
              }
            },
            "fullyQualifiedLogicalName":"CallAccessor",
            "decoratedName":"?CallAccessor@@YAXPAUC@@@Z",
            "properties":{
              "funcline":"70"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":70
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":72
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":73
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":22,
                    "startLine":73
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":45,
                    "startLine":75
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":31,
                    "startLine":75
                  }
                },
                "step":6
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":15,
                    "startLine":75
                  }
                },
                "step":7
              }
            ]
          }
        ]
      },{
        "ruleId":"26002",
        "message":"Accessing buffer 'result.GetBuffer'75' of unspecified length.  Please annotate.\n\nIf we assume that the buffer has single element in length, then the checker would report:\nPotential read overflow using expression '(const void *)result.GetBuffer'\nBuffer result.GetBuffer created during call to C::GetBuffer on line 75\nBuffer is of length 1 bytes [assumed because the buffer is unannotated]\nAccessing (this->C::size)`53 + 1 bytes starting at byte offset 0\nAnnotation on function memcpy requires that {parameter 2} is of length >= {parameter 3} bytes\n  where {parameter 2} is (const void *)result.GetBuffer; {parameter 3} is result.GetSize + 1\n[Annotation _In_(byteCount({parameter 3}))]\n\n\n when function C::GetSize called at line 73 is inline analyzed.\n when function C::GetBuffer called at line 75 is inline analyzed.\n when function C::GetSize called at line 75 is inline analyzed.\n\nValues of variables:\nPointer result.GetBuffer is at offset 0 bytes from the start of the buffer\nresult.GetSize = (this->C::size)`53\n\nwhere\noffset(result.GetBuffer)`75 == 0\n(this->C::size)`53 <= 10\n(this->C::size)`53 >= 0\n\nOverrun access occurs when\n(this->C::size)`53 >= 1\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":15,
                "startLine":75
              }
            },
            "fullyQualifiedLogicalName":"CallAccessor",
            "decoratedName":"?CallAccessor@@YAXPAUC@@@Z",
            "properties":{
              "funcline":"70"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":70
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":72
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":73
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":22,
                    "startLine":73
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":45,
                    "startLine":75
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":31,
                    "startLine":75
                  }
                },
                "step":6
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":15,
                    "startLine":75
                  }
                },
                "step":7
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'a[result.returnGlob]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset glob`83 + 10\n\n when function returnGlob called at line 89 is inline analyzed.\n when function returnGlob called at line 90 is inline analyzed.\n\nValues of variables:\nresult.returnGlob = glob`83 + 10\n\nwhere\nglob`83 >= 0\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":23,
                "startLine":90
              }
            },
            "fullyQualifiedLogicalName":"foo",
            "decoratedName":"?foo@@YAXXZ",
            "properties":{
              "funcline":"86"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":86
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":88
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":17,
                    "startLine":89
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":22,
                    "startLine":89
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":17,
                    "startLine":90
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":23,
                    "startLine":90
                  }
                },
                "step":6
              }
            ]
          }
        ]
      },{
        "ruleId":"26003",
        "message":"Writing to buffer 'result.alloc'102' of unspecified length.  Please annotate.\n\nIf we assume that the buffer has single element in length, then the checker would report:\nPotential overflow using expression 'p[10]'\nBuffer result.alloc created during call to alloc on line 102\nBuffer is of length 0 bytes [assumed because the buffer is unannotated]\nAccessing the byte at byte offset 10\n\n when function alloc called at line 102 is inline analyzed.\n\nValues of variables:\nPointer p is at offset 0 bytes from the start of the buffer\n\nOverrun access occurs when\noffset(result.alloc)`102 == 0\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":11,
                "startLine":105
              }
            },
            "fullyQualifiedLogicalName":"callAlloc",
            "decoratedName":"?callAlloc@@YAXXZ",
            "properties":{
              "funcline":"98"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":98
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":100
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":101
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":102
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":28,
                    "startLine":102
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":15,
                    "startLine":102
                  }
                },
                "step":6
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":103
                  }
                },
                "step":7
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":105
                  }
                },
                "step":8
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression 'a[result.Recursive]'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: result.Recursive`111a is not constrained by any constant\n\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset result.Recursive`111a + 4\n\n when function Recursive called at line 117 is inline analyzed.\n\nValues of variables:\nresult.Recursive = result.Recursive`111a + 4\n\nOverrun access occurs when\nresult.Recursive`111a >= 6\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":21,
                "startLine":117
              }
            },
            "fullyQualifiedLogicalName":"callRecursive",
            "decoratedName":"?callRecursive@@YAXH@Z",
            "properties":{
              "funcline":"114"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":114
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":116
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":16,
                    "startLine":117
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":21,
                    "startLine":117
                  }
                },
                "step":4
              }
            ]
          }
        ]
      },{
        "ruleId":"26011",
        "message":"Potential Underflow using expression 'a[result.Recursive]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset result.Recursive`111a + 4\n\n when function Recursive called at line 117 is inline analyzed.\n\nValues of variables:\nresult.Recursive = result.Recursive`111a + 4\n\nUnderflow access occurs when\nresult.Recursive`111a + 5 <= 0\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":21,
                "startLine":117
              }
            },
            "fullyQualifiedLogicalName":"callRecursive",
            "decoratedName":"?callRecursive@@YAXH@Z",
            "properties":{
              "funcline":"114"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":114
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":116
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":16,
                    "startLine":117
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":21,
                    "startLine":117
                  }
                },
                "step":4
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'a[x]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset 16\n\n when function add called at line 128 is inline analyzed.\n when function add called at line 128 is inline analyzed.\n when function add called at line 128 is inline analyzed.\n when function add called at line 128 is inline analyzed.\n\nValues of variables:\nx = 16\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":10,
                "startLine":129
              }
            },
            "fullyQualifiedLogicalName":"repeated",
            "decoratedName":"?repeated@@YAXXZ",
            "properties":{
              "funcline":"125"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":125
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":127
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":128
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":39,
                    "startLine":128
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":27,
                    "startLine":128
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":20,
                    "startLine":128
                  }
                },
                "step":6
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":16,
                    "startLine":128
                  }
                },
                "step":7
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":16,
                    "startLine":128
                  }
                },
                "step":8
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":129
                  }
                },
                "step":9
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'p'\nBuffer p is a parameter to this function declared on line 138\nBuffer is of length offset(p)`138 + n`138 bytes [from annotation SAL_writableTo(elementCount(n)) at c:\\somepath\\test090.cpp(138)]\nAccessing n`138 + 1 bytes starting at byte offset 0\nAnnotation on function Access requires that {parameter 1} is of length >= {parameter 2} elements (1 bytes\/element)\n  where {parameter 1} is p; {parameter 2} is n + 1\n[Annotation SAL_writableTo(elementCount({parameter 2})) at c:\\somepath\\test090.cpp(132)]\n\n\nValues of variables:\nPointer p is at offset 0 bytes from the start of the buffer\nn = n`138\n\nwhere\noffset(p)`138 == 0\nn`138 >= 1\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":11,
                "startLine":140
              }
            },
            "fullyQualifiedLogicalName":"CallAccess",
            "decoratedName":"?CallAccess@@YAXPADI@Z",
            "properties":{
              "funcline":"138"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":138
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":11,
                    "startLine":140
                  }
                },
                "step":2
              }
            ]
          }
        ]
      },{
        "ruleId":"26015",
        "message":"Potential overflow using expression 'a[n]'\nBuffer access is apparently unbounded by the buffer size.  \n\nIn particular: result.loop`164a is not constrained by any constant\n\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset result.loop`164a\n\nValues of variables:\nn = result.loop`164a\n\nwhere\nresult.loop`164a >= 0\n\nOverrun access occurs when\nresult.loop`164a >= 10\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":10,
                "startLine":165
              }
            },
            "fullyQualifiedLogicalName":"callLoop",
            "decoratedName":"?callLoop@@YAXI@Z",
            "properties":{
              "funcline":"161"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":161
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":163
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":164
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":7,
                    "startLine":164
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":165
                  }
                },
                "step":5
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'a[p->c]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset 11\n\n when function add called at line 190 is inline analyzed.\n\nValues of variables:\n(p->S::c) = 11\nPointer p is at offset 0 bytes from the start of p\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":13,
                "startLine":191
              }
            },
            "fullyQualifiedLogicalName":"callAdd",
            "decoratedName":"?callAdd@@YAXPAUS@@@Z",
            "properties":{
              "funcline":"185"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":185
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":187
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":188
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":10,
                    "startLine":189
                  }
                },
                "step":4
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":8,
                    "startLine":190
                  }
                },
                "step":5
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":13,
                    "startLine":191
                  }
                },
                "step":6
              }
            ]
          }
        ]
      },{
        "ruleId":"26000",
        "message":"Overflow using expression 'a[s->next->x]'\nBuffer accessed is a\nBuffer is of length 10 elements (4 bytes\/element) [size of variable]\nAccessing the element (4 bytes\/element) at element offset 10\n\n when function set called at line 202 is inline analyzed.\n\nValues of variables:\n((s->S::next)->S1::x) = 10\nPointer (s->S::next) is at offset 0 bytes from the start of (s->S::next)\nPointer s is at offset 0 bytes from the start of s\n",
        "locations":[
          {
            "resultFile":{
              "uri":"file:///c:/somepath/test090.cpp",
              "region":{
                "startColumn":19,
                "startLine":203
              }
            },
            "fullyQualifiedLogicalName":"callSet",
            "decoratedName":"?callSet@@YAXPAUS@@@Z",
            "properties":{
              "funcline":"199"
            }
          }
        ],
        "codeFlows":[
          {
            "locations":[
              {
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":6,
                    "startLine":199
                  }
                },
                "step":1
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":9,
                    "startLine":201
                  }
                },
                "step":2
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":8,
                    "startLine":202
                  }
                },
                "step":3
              },{
                "physicalLocation":{
                  "uri":"file:///c:/somepath/test090.cpp",
                  "region":{
                    "startColumn":19,
                    "startLine":203
                  }
                },
                "step":4
              }
            ]
          }
        ]
      }
    ]
  }
]
}